/*
   Copyright 2025 Docker SDK authors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
   https://openapi-generator.tech
   Do not edit the class manually.
 */

import { type Health } from '../models/Health.js';

/**
 * ContainerState stores container\'s running state. It\'s part of ContainerJSONBase and will be returned by the \"inspect\" command.
 */
export interface ContainerState {
    /**
     * String representation of the container state. Can be one of \&quot;created\&quot;, \&quot;running\&quot;, \&quot;paused\&quot;, \&quot;restarting\&quot;, \&quot;removing\&quot;, \&quot;exited\&quot;, or \&quot;dead\&quot;.
     */
    Status?: ContainerStateStatusEnum;

    /**
     * Whether this container is running.  Note that a running container can be _paused_. The &#x60;Running&#x60; and &#x60;Paused&#x60; booleans are not mutually exclusive:  When pausing a container (on Linux), the freezer cgroup is used to suspend all processes in the container. Freezing the process requires the process to be running. As a result, paused containers are both &#x60;Running&#x60; _and_ &#x60;Paused&#x60;.  Use the &#x60;Status&#x60; field instead to determine if a container\&#39;s state is \&quot;running\&quot;.
     */
    Running?: boolean;

    /**
     * Whether this container is paused.
     */
    Paused?: boolean;

    /**
     * Whether this container is restarting.
     */
    Restarting?: boolean;

    /**
     * Whether a process within this container has been killed because it ran out of memory since the container was last started.
     */
    OOMKilled?: boolean;

    Dead?: boolean;

    /**
     * The process ID of this container
     */
    Pid?: number;

    /**
     * The last exit code of this container
     */
    ExitCode?: number;

    Error?: string;

    /**
     * The time when this container was last started.
     */
    StartedAt?: string;

    /**
     * The time when this container last exited.
     */
    FinishedAt?: string;

    Health?: Health | null;
}

export type ContainerStateStatusEnum =
    | 'created'
    | 'running'
    | 'paused'
    | 'restarting'
    | 'removing'
    | 'exited'
    | 'dead';
