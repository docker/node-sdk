/*
   Copyright 2025 Docker SDK authors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
   https://openapi-generator.tech
   Do not edit the class manually.
 */

import { type HealthConfig } from '../models/HealthConfig.js';

/**
 * Configuration for a container that is portable between hosts.
 */
export interface ContainerConfig {
    /**
     * The hostname to use for the container, as a valid RFC 1123 hostname.
     */
    Hostname?: string;

    /**
     * The domain name to use for the container.
     */
    Domainname?: string;

    /**
     * Commands run as this user inside the container. If omitted, commands run as the user specified in the image the container was started from.  Can be either user-name or UID, and optional group-name or GID, separated by a colon (&#x60;&lt;user-name|UID&gt;[&lt;:group-name|GID&gt;]&#x60;).
     */
    User?: string;

    /**
     * Whether to attach to &#x60;stdin&#x60;.
     */
    AttachStdin?: boolean;

    /**
     * Whether to attach to &#x60;stdout&#x60;.
     */
    AttachStdout?: boolean;

    /**
     * Whether to attach to &#x60;stderr&#x60;.
     */
    AttachStderr?: boolean;

    /**
     * An object mapping ports to an empty object in the form:  &#x60;{\&quot;&lt;port&gt;/&lt;tcp|udp|sctp&gt;\&quot;: {}}&#x60;
     */
    ExposedPorts?: { [key: string]: any } | null;

    /**
     * Attach standard streams to a TTY, including &#x60;stdin&#x60; if it is not closed.
     */
    Tty?: boolean;

    /**
     * Open &#x60;stdin&#x60;
     */
    OpenStdin?: boolean;

    /**
     * Close &#x60;stdin&#x60; after one attached client disconnects
     */
    StdinOnce?: boolean;

    /**
     * A list of environment variables to set inside the container in the form &#x60;[\&quot;VAR&#x3D;value\&quot;, ...]&#x60;. A variable without &#x60;&#x3D;&#x60; is removed from the environment, rather than to have an empty value.
     */
    Env?: Array<string>;

    /**
     * Command to run specified as a string or an array of strings.
     */
    Cmd?: Array<string>;

    Healthcheck?: HealthConfig;

    /**
     * Command is already escaped (Windows only)
     */
    ArgsEscaped?: boolean | null;

    /**
     * The name (or reference) of the image to use when creating the container, or which was used when the container was created.
     */
    Image?: string;

    /**
     * An object mapping mount point paths inside the container to empty objects.
     */
    Volumes?: { [key: string]: any };

    /**
     * The working directory for commands to run in.
     */
    WorkingDir?: string;

    /**
     * The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (&#x60;[\&quot;\&quot;]&#x60;) then the entry point is reset to system default (i.e., the entry point used by docker when there is no &#x60;ENTRYPOINT&#x60; instruction in the &#x60;Dockerfile&#x60;).
     */
    Entrypoint?: Array<string>;

    /**
     * Disable networking for the container.
     */
    NetworkDisabled?: boolean | null;

    /**
     * MAC address of the container.  Deprecated: this field is deprecated in API v1.44 and up. Use EndpointSettings.MacAddress instead.
     */
    MacAddress?: string | null;

    /**
     * &#x60;ONBUILD&#x60; metadata that were defined in the image\&#39;s &#x60;Dockerfile&#x60;.
     */
    OnBuild?: Array<string> | null;

    /**
     * User-defined key/value metadata.
     */
    Labels?: { [key: string]: string };

    /**
     * Signal to stop a container as a string or unsigned integer.
     */
    StopSignal?: string | null;

    /**
     * Timeout to stop a container in seconds.
     */
    StopTimeout?: number | null;

    /**
     * Shell for when &#x60;RUN&#x60;, &#x60;CMD&#x60;, and &#x60;ENTRYPOINT&#x60; uses a shell.
     */
    Shell?: Array<string> | null;
}
