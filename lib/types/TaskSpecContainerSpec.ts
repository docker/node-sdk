/*
   Copyright 2025 Docker SDK authors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
   https://openapi-generator.tech
   Do not edit the class manually.
 */

import { type HealthConfig } from '../types/HealthConfig.js';
import { type Mount } from '../types/Mount.js';
import { type ResourcesUlimitsInner } from '../types/ResourcesUlimitsInner.js';
import { type TaskSpecContainerSpecConfigsInner } from '../types/TaskSpecContainerSpecConfigsInner.js';
import { type TaskSpecContainerSpecDNSConfig } from '../types/TaskSpecContainerSpecDNSConfig.js';
import { type TaskSpecContainerSpecPrivileges } from '../types/TaskSpecContainerSpecPrivileges.js';
import { type TaskSpecContainerSpecSecretsInner } from '../types/TaskSpecContainerSpecSecretsInner.js';

/**
 * Container spec for the service.  <p><br /></p>  > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are > mutually exclusive. PluginSpec is only used when the Runtime field > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime > field is set to `attachment`.
 */
export interface TaskSpecContainerSpec {
    /**
     * The image name to use for the container
     */
    Image?: string;

    /**
     * User-defined key/value data.
     */
    Labels?: { [key: string]: string };

    /**
     * The command to be run in the image.
     */
    Command?: Array<string>;

    /**
     * Arguments to the command.
     */
    Args?: Array<string>;

    /**
     * The hostname to use for the container, as a valid [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname.
     */
    Hostname?: string;

    /**
     * A list of environment variables in the form &#x60;VAR&#x3D;value&#x60;.
     */
    Env?: Array<string>;

    /**
     * The working directory for commands to run in.
     */
    Dir?: string;

    /**
     * The user inside the container.
     */
    User?: string;

    /**
     * A list of additional groups that the container process will run as.
     */
    Groups?: Array<string>;

    Privileges?: TaskSpecContainerSpecPrivileges;

    /**
     * Whether a pseudo-TTY should be allocated.
     */
    TTY?: boolean;

    /**
     * Open &#x60;stdin&#x60;
     */
    OpenStdin?: boolean;

    /**
     * Mount the container\&#39;s root filesystem as read only.
     */
    ReadOnly?: boolean;

    /**
     * Specification for mounts to be added to containers created as part of the service.
     */
    Mounts?: Array<Mount>;

    /**
     * Signal to stop the container.
     */
    StopSignal?: string;

    /**
     * Amount of time to wait for the container to terminate before forcefully killing it.
     */
    StopGracePeriod?: number;

    HealthCheck?: HealthConfig;

    /**
     * A list of hostname/IP mappings to add to the container\&#39;s &#x60;hosts&#x60; file. The format of extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address canonical_hostname [aliases...]
     */
    Hosts?: Array<string>;

    DNSConfig?: TaskSpecContainerSpecDNSConfig;

    /**
     * Secrets contains references to zero or more secrets that will be exposed to the service.
     */
    Secrets?: Array<TaskSpecContainerSpecSecretsInner>;

    /**
     * An integer value containing the score given to the container in order to tune OOM killer preferences.
     */
    OomScoreAdj?: number;

    /**
     * Configs contains references to zero or more configs that will be exposed to the service.
     */
    Configs?: Array<TaskSpecContainerSpecConfigsInner>;

    /**
     * Isolation technology of the containers running the service. (Windows only)
     */
    Isolation?: TaskSpecContainerSpecIsolationEnum;

    /**
     * Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.
     */
    Init?: boolean | null;

    /**
     * Set kernel namedspaced parameters (sysctls) in the container. The Sysctls option on services accepts the same sysctls as the are supported on containers. Note that while the same sysctls are supported, no guarantees or checks are made about their suitability for a clustered environment, and it\&#39;s up to the user to determine whether a given sysctl will work properly in a Service.
     */
    Sysctls?: { [key: string]: string };

    /**
     * A list of kernel capabilities to add to the default set for the container.
     */
    CapabilityAdd?: Array<string>;

    /**
     * A list of kernel capabilities to drop from the default set for the container.
     */
    CapabilityDrop?: Array<string>;

    /**
     * A list of resource limits to set in the container. For example: &#x60;{\&quot;Name\&quot;: \&quot;nofile\&quot;, \&quot;Soft\&quot;: 1024, \&quot;Hard\&quot;: 2048}&#x60;\&quot;
     */
    Ulimits?: Array<ResourcesUlimitsInner>;
}

export type TaskSpecContainerSpecIsolationEnum =
    | 'default'
    | 'process'
    | 'hyperv'
    | '';
